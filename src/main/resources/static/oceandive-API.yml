openapi: 3.0.0
info:
    title: "oceandive API"
    description: "oceandive API"
    version: "1.0.0"
servers:
    - url: "https://localhost:8080"
tags:
    - name: "Admin"
      description: "Administrative operations"
    - name: "Authentication"
      description: "Authentication operations"
    - name: "Course"
      description: "Course management operations"
    - name: "Booking"
      description: "Course and trip booking operations"
    - name: "Trip"
      description: "Trip management operations"
    - name: "Dive Logs"
      description: "Operations related to dive logs"
paths:
    /api/admin/add-course:
        post:
            summary: "Create new diving course"
            operationId: "createCourse"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Course"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/admin/add-trip:
        post:
            summary: "Create new diving trip"
            operationId: "createTrip"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Trip"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/admin/view-bookings:
        get:
            summary: "Get all bookings information"
            operationId: "viewBookings"
            parameters:
                - name: "page"
                  in: "query"
                  required: false
                  description: "Page number"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "0"
                - name: "size"
                  in: "query"
                  required: false
                  description: "Page size"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "20"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/admin/view-users:
        get:
            summary: "Get all users with pagination"
            operationId: "viewUsers"
            parameters:
                - name: "page"
                  in: "query"
                  required: false
                  description: "Page number"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "0"
                - name: "size"
                  in: "query"
                  required: false
                  description: "Page size"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "20"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/admin/login:
        post:
            summary: "Admin login"
            operationId: "adminLogin"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginRequest"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/admin/my-profile:
        get:
            summary: "Get admin profile"
            operationId: "getAdminProfile"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/admin/register:
        post:
            summary: "Register new admin"
            operationId: "registerAdmin"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RegistrationRequest"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/logout:
        post:
            summary: "Logout user"
            operationId: "logoutUser"
            parameters:
                - name: "Authorization"
                  in: "header"
                  required: true
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/refresh:
        post:
            summary: "Refresh access token"
            operationId: "refreshToken"
            parameters:
                - name: "refreshToken"
                  in: "query"
                  required: true
                  description: "Refresh token"
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/token:
        post:
            summary: "Generate access token"
            operationId: "generateAccessToken"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/user/login:
        post:
            summary: "User login"
            operationId: "userLogin"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginRequest"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/user/my-profile:
        get:
            summary: "Get user profile"
            operationId: "getUserProfile"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/auth/user/register:
        post:
            summary: "Register new user"
            operationId: "registerUser"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RegistrationRequest"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Response"
    /api/courses:
        get:
            summary: "Get all courses"
            operationId: "getAllCourses"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Course"
    /api/courses/available:
        get:
            summary: "Get available courses"
            operationId: "getAvailableCourses"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Course"
    /api/courses/date-range:
        get:
            summary: "Get courses by date range"
            operationId: "getCoursesByDateRange"
            parameters:
                - name: "startDate"
                  in: "query"
                  required: true
                  description: "Start date"
                  schema:
                      type: "string"
                      format: "date"
                - name: "endDate"
                  in: "query"
                  required: true
                  description: "End date"
                  schema:
                      type: "string"
                      format: "date"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Course"
    /api/courses/name/{name}:
        get:
            summary: "Get courses by name"
            operationId: "getCoursesByName"
            parameters:
                - name: "name"
                  in: "path"
                  required: true
                  description: "Course name"
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Course"
    /api/courses/upcoming:
        get:
            summary: "Get upcoming courses"
            operationId: "getUpcomingCourses"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/courses/{id}:
        get:
            summary: "Get course by ID"
            operationId: "getCourseById"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Course ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                $ref: "#/components/schemas/Course"
    /api/bookings/courses/{courseId}/guest:
        post:
            summary: "Book course for a public user (guest user)"
            operationId: "bookCourseForGuest"
            parameters:
                - name: "courseId"
                  in: "path"
                  required: true
                  description: "Course ID"
                  schema:
                      type: "integer"
                      format: "int64"
                - name: "guestUserId"
                  in: "query"
                  required: true
                  description: "Guest user ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "string"
    /api/bookings/courses/{courseId}/user:
        post:
            summary: "Book course for user"
            operationId: "bookCourseForUser"
            parameters:
                - name: "courseId"
                  in: "path"
                  required: true
                  description: "Course ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "string"
    /api/bookings/trips/{tripId}/guest:
        post:
            summary: "Book trip for guest"
            operationId: "bookTripForGuest"
            parameters:
                - name: "tripId"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
                - name: "guestUserId"
                  in: "query"
                  required: true
                  description: "Guest user ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "string"
    /api/bookings/trips/{tripId}/user:
        post:
            summary: "Book trip for user"
            operationId: "bookTripForUser"
            parameters:
                - name: "tripId"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "string"
    /api/trips:
        get:
            summary: "Get all trips"
            operationId: "getAllTrips"
            parameters:
                - name: "page"
                  in: "query"
                  required: false
                  description: "Page number"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "0"
                - name: "size"
                  in: "query"
                  required: false
                  description: "Page size"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "20"
                - name: "includeUnpublished"
                  in: "query"
                  required: false
                  description: "Include unpublished trips"
                  schema:
                      type: "boolean"
                      default: "false"
                - name: "paginated"
                  in: "query"
                  required: false
                  description: "Enable pagination"
                  schema:
                      type: "boolean"
                      default: "false"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
        post:
            summary: "Create new trip"
            operationId: "createNewTrip"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TripDTO"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/active:
        get:
            summary: "Get active trips"
            operationId: "getActiveTrips"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/analytics/low-bookings:
        get:
            summary: "Get trips with low bookings"
            operationId: "getLowBookingTrips"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/analytics/most-booked:
        get:
            summary: "Get most booked trips"
            operationId: "getMostBookedTrips"
            parameters:
                - name: "limit"
                  in: "query"
                  required: false
                  description: "Maximum results"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "10"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/analytics/popular-destinations:
        get:
            summary: "Get popular destinations"
            operationId: "getPopularDestinations"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Map"
    /api/trips/available:
        get:
            summary: "Get available trips"
            operationId: "getAvailableTrips"
            parameters:
                - name: "upcomingOnly"
                  in: "query"
                  required: false
                  description: "Upcoming trips only"
                  schema:
                      type: "boolean"
                      default: "false"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/certification/{level}:
        get:
            summary: "Get trips for certification"
            operationId: "getTripsForCertification"
            parameters:
                - name: "level"
                  in: "path"
                  required: true
                  description: "Certification level"
                  schema:
                      type: "string"
                      enum:
                          - "NON_DIVER"
                          - "OPEN_WATER"
                          - "ADVANCED_OPEN_WATER"
                          - "RESCUE_DIVER"
                          - "DIVEMASTER"
                          - "INSTRUCTOR"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/date-range:
        get:
            summary: "Get trips by date range"
            operationId: "getTripsByDateRange"
            parameters:
                - name: "startDate"
                  in: "query"
                  required: true
                  description: "Start date"
                  schema:
                      type: "string"
                      format: "date"
                - name: "endDate"
                  in: "query"
                  required: true
                  description: "End date"
                  schema:
                      type: "string"
                      format: "date"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/featured:
        get:
            summary: "Get featured trips"
            operationId: "getFeaturedTrips"
            parameters:
                - name: "limit"
                  in: "query"
                  required: false
                  description: "Maximum results"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "6"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/location/{location}:
        get:
            summary: "Get trips by location"
            operationId: "getTripsByLocation"
            parameters:
                - name: "location"
                  in: "path"
                  required: true
                  description: "Location name"
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/locations:
        get:
            summary: "Get distinct locations"
            operationId: "getDistinctLocations"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    type: "string"
    /api/trips/past:
        get:
            summary: "Get past trips"
            operationId: "getPastTrips"
            parameters:
                - name: "limit"
                  in: "query"
                  required: false
                  description: "Maximum results"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "20"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/price-range:
        get:
            summary: "Get trips by price range"
            operationId: "getTripsByPriceRange"
            parameters:
                - name: "minPrice"
                  in: "query"
                  required: true
                  description: "Minimum price"
                  schema:
                      $ref: "#/components/schemas/BigDecimal"
                - name: "maxPrice"
                  in: "query"
                  required: true
                  description: "Maximum price"
                  schema:
                      $ref: "#/components/schemas/BigDecimal"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/search:
        get:
            summary: "Search trips with filters"
            operationId: "searchTrips"
            parameters:
                - name: "location"
                  in: "query"
                  required: false
                  description: "Location filter"
                  schema:
                      type: "string"
                - name: "startDate"
                  in: "query"
                  required: false
                  description: "Start date filter"
                  schema:
                      type: "string"
                      format: "date"
                - name: "endDate"
                  in: "query"
                  required: false
                  description: "End date filter"
                  schema:
                      type: "string"
                      format: "date"
                - name: "certification"
                  in: "query"
                  required: false
                  description: "Certification level filter"
                  schema:
                      type: "string"
                      enum:
                          - "NON_DIVER"
                          - "OPEN_WATER"
                          - "ADVANCED_OPEN_WATER"
                          - "RESCUE_DIVER"
                          - "DIVEMASTER"
                          - "INSTRUCTOR"
                - name: "availableOnly"
                  in: "query"
                  required: false
                  description: "Available spots only"
                  schema:
                      type: "boolean"
                      default: "false"
                - name: "minPrice"
                  in: "query"
                  required: false
                  description: "Minimum price"
                  schema:
                      $ref: "#/components/schemas/BigDecimal"
                - name: "maxPrice"
                  in: "query"
                  required: false
                  description: "Maximum price"
                  schema:
                      $ref: "#/components/schemas/BigDecimal"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Trip"
    /api/trips/slug/{slug}:
        get:
            summary: "Get trip by slug"
            operationId: "getTripBySlug"
            parameters:
                - name: "slug"
                  in: "path"
                  required: true
                  description: "Trip slug"
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/statistics:
        get:
            summary: "Get trip statistics"
            operationId: "getTripStatistics"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "string"
    /api/trips/upcoming:
        get:
            summary: "Get upcoming trips"
            operationId: "getUpcomingTrips"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/{id}:
        get:
            summary: "Get trip by ID"
            operationId: "getTripById"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
        put:
            summary: "Update trip"
            operationId: "updateTrip"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TripDTO"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
        delete:
            summary: "Delete trip"
            operationId: "deleteTrip"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/{id}/archive:
        put:
            summary: "Archive trip"
            operationId: "archiveTrip"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/{id}/book:
        post:
            summary: "Book trip"
            operationId: "bookTrip"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
                - name: "certification"
                  in: "query"
                  required: false
                  description: "User certification"
                  schema:
                      type: "string"
                      enum:
                          - "NON_DIVER"
                          - "OPEN_WATER"
                          - "ADVANCED_OPEN_WATER"
                          - "RESCUE_DIVER"
                          - "DIVEMASTER"
                          - "INSTRUCTOR"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/{id}/can-book:
        get:
            summary: "Check booking eligibility"
            operationId: "checkBookingEligibility"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
                - name: "certification"
                  in: "query"
                  required: true
                  description: "User certification"
                  schema:
                      type: "string"
                      enum:
                          - "NON_DIVER"
                          - "OPEN_WATER"
                          - "ADVANCED_OPEN_WATER"
                          - "RESCUE_DIVER"
                          - "DIVEMASTER"
                          - "INSTRUCTOR"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/{id}/cancel-booking:
        post:
            summary: "Cancel trip booking"
            operationId: "cancelTripBooking"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/trips/{id}/similar:
        get:
            summary: "Get similar trips"
            operationId: "getSimilarTrips"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Trip ID"
                  schema:
                      type: "integer"
                      format: "int64"
                - name: "limit"
                  in: "query"
                  required: false
                  description: "Maximum results"
                  schema:
                      type: "integer"
                      format: "int32"
                      default: "5"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/dive-logs:
        get:
            summary: "Get user's dive logs"
            operationId: "getUserDiveLogs"
            parameters:
                - name: "location"
                  in: "query"
                  required: false
                  description: "Filter by location"
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "string"
        post:
            summary: "Create new dive log"
            operationId: "createDiveLog"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DiveLogDTO"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/dive-logs/locations:
        get:
            summary: "Filter dive logs by location"
            operationId: "filterDiveLogsByLocation"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
    /api/dive-logs/{id}:
        get:
            summary: "Get dive log by ID"
            operationId: "getDiveLogById"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Dive log ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
        put:
            summary: "Update dive log"
            operationId: "updateDiveLog"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Dive log ID"
                  schema:
                      type: "integer"
                      format: "int64"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DiveLogDTO"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
        delete:
            summary: "Delete dive log"
            operationId: "deleteDiveLog"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "Dive log ID"
                  schema:
                      type: "integer"
                      format: "int64"
            responses:
                "200":
                    description: "OK"
                    content:
                        '*/*':
                            schema:
                                type: "object"
components:
    schemas:
        BigDecimal:
            type: "object"
            properties: { }
        Course:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                    nullable: true
                name:
                    type: "string"
                    nullable: true
                description:
                    type: "string"
                    nullable: true
                shortDescription:
                    type: "string"
                    nullable: true
                startDate:
                    type: "string"
                    format: "date"
                    nullable: true
                endDate:
                    type: "string"
                    format: "date"
                    nullable: true
                createdAt:
                    type: "string"
                    format: "date-time"
                    nullable: true
                imageUrl:
                    type: "string"
                    nullable: true
                capacity:
                    type: "integer"
                    format: "int32"
                    nullable: true
                currentBookings:
                    type: "integer"
                    format: "int32"
                    nullable: true
                minCertificationRequired:
                    type: "string"
                    nullable: true
                    enum:
                        - "NON_DIVER"
                        - "OPEN_WATER"
                        - "ADVANCED_OPEN_WATER"
                        - "RESCUE_DIVER"
                        - "DIVEMASTER"
                        - "INSTRUCTOR"
                price:
                    $ref: "#/components/schemas/BigDecimal"
                status:
                    type: "string"
                    nullable: true
                    enum:
                        - "DRAFT"
                        - "PUBLISHED"
                        - "ARCHIVED"
                featured:
                    type: "boolean"
                    nullable: true
                displayOrder:
                    type: "integer"
                    format: "int32"
                    nullable: true
                    default: "0"
                slug:
                    type: "string"
                    nullable: true
                updatedAt:
                    type: "string"
                    format: "date-time"
                    nullable: true
        Object:
            type: "object"
            properties: { }
        Response:
            type: "object"
            properties:
                success:
                    type: "boolean"
                    nullable: true
                message:
                    type: "string"
                    nullable: true
                data:
                    $ref: "#/components/schemas/Object"
        Trip:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                    nullable: true
                location:
                    type: "string"
                    nullable: true
                description:
                    type: "string"
                    nullable: true
                shortDescription:
                    type: "string"
                    nullable: true
                startDate:
                    type: "string"
                    format: "date"
                    nullable: true
                endDate:
                    type: "string"
                    format: "date"
                    nullable: true
                createdAt:
                    type: "string"
                    format: "date-time"
                    nullable: true
                imageUrl:
                    type: "string"
                    nullable: true
                capacity:
                    type: "integer"
                    format: "int32"
                    nullable: true
                currentBookings:
                    type: "integer"
                    format: "int32"
                    nullable: true
                minCertificationRequired:
                    type: "string"
                    nullable: true
                    enum:
                        - "NON_DIVER"
                        - "OPEN_WATER"
                        - "ADVANCED_OPEN_WATER"
                        - "RESCUE_DIVER"
                        - "DIVEMASTER"
                        - "INSTRUCTOR"
                price:
                    $ref: "#/components/schemas/BigDecimal"
                status:
                    type: "string"
                    nullable: true
                    enum:
                        - "DRAFT"
                        - "PUBLISHED"
                        - "ARCHIVED"
                featured:
                    type: "boolean"
                    nullable: true
                displayOrder:
                    type: "integer"
                    format: "int32"
                    nullable: true
                    default: "0"
                slug:
                    type: "string"
                    nullable: true
                updatedAt:
                    type: "string"
                    format: "date-time"
                    nullable: true
        LoginRequest:
            type: "object"
            properties:
                username:
                    type: "string"
                    nullable: true
                password:
                    type: "string"
                    nullable: true
        RegistrationRequest:
            type: "object"
            properties:
                firstName:
                    type: "string"
                    nullable: true
                lastName:
                    type: "string"
                    nullable: true
                email:
                    type: "string"
                    nullable: true
                mobile:
                    type: "string"
                    nullable: true
                diveCertification:
                    type: "string"
                    nullable: true
                    enum:
                        - "NON_DIVER"
                        - "OPEN_WATER"
                        - "ADVANCED_OPEN_WATER"
                        - "RESCUE_DIVER"
                        - "DIVEMASTER"
                        - "INSTRUCTOR"
                username:
                    type: "string"
                    nullable: true
                password:
                    type: "string"
                    nullable: true
                roleLimitation:
                    type: "string"
                    nullable: true
        TripDTO:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                    nullable: true
                location:
                    type: "string"
                    nullable: true
                description:
                    type: "string"
                    nullable: true
                shortDescription:
                    type: "string"
                    nullable: true
                startDate:
                    type: "string"
                    format: "date"
                    nullable: true
                endDate:
                    type: "string"
                    format: "date"
                    nullable: true
                createdAt:
                    type: "string"
                    format: "date-time"
                    nullable: true
                imageUrl:
                    type: "string"
                    nullable: true
                capacity:
                    type: "integer"
                    format: "int32"
                    nullable: true
                currentBookings:
                    type: "integer"
                    format: "int32"
                    nullable: true
                minCertificationRequired:
                    type: "string"
                    nullable: true
                    enum:
                        - "NON_DIVER"
                        - "OPEN_WATER"
                        - "ADVANCED_OPEN_WATER"
                        - "RESCUE_DIVER"
                        - "DIVEMASTER"
                        - "INSTRUCTOR"
                price:
                    $ref: "#/components/schemas/BigDecimal"
                status:
                    type: "string"
                    nullable: true
                    enum:
                        - "DRAFT"
                        - "PUBLISHED"
                        - "ARCHIVED"
                featured:
                    type: "boolean"
                    nullable: true
                displayOrder:
                    type: "integer"
                    format: "int32"
                    nullable: true
                slug:
                    type: "string"
                    nullable: true
                updatedAt:
                    type: "string"
                    format: "date-time"
                    nullable: true
        Map:
            type: "object"
            properties: { }
        DiveLogDTO:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                    nullable: true
                diveNumber:
                    type: "integer"
                    format: "int32"
                    nullable: true
                location:
                    type: "string"
                    nullable: true
                startTime:
                    type: "string"
                    format: "partial-time"
                    nullable: true
                endTime:
                    type: "string"
                    format: "partial-time"
                    nullable: true
                duration:
                    type: "integer"
                    format: "int32"
                    nullable: true
                waterTemperature:
                    type: "number"
                    format: "double"
                    nullable: true
                airTemperature:
                    type: "number"
                    format: "double"
                    nullable: true
                notes:
                    type: "string"
                    nullable: true
                diveDate:
                    type: "string"
                    format: "date"
                    nullable: true
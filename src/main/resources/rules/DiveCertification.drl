package rules;

import ch.fhnw.oceandive.model.DiveCertification;
import ch.fhnw.oceandive.model.CertificationValidator;
import ch.fhnw.oceandive.model.DiveCertificationHolder;
import ch.fhnw.oceandive.model.Trip;
import ch.fhnw.oceandive.model.Course;
import ch.fhnw.oceandive.model.ValidationResult;

// ================ Simple Certification Validators ================

// Allow NON_DIVER to participate in NON_DIVER activities
rule "NON_DIVER can do NON_DIVER activities"
    when
        $result: CertificationValidator(
            userCertification == DiveCertification.NON_DIVER,
            requiredCertification == DiveCertification.NON_DIVER
        )
    then
        $result.setValid(true);
end

// Allow any certification level to participate in NON_DIVER activities
rule "Any certification can do NON_DIVER activities"
    when
        $result: CertificationValidator(
            requiredCertification == DiveCertification.NON_DIVER
        )
    then
        $result.setValid(true);
end

// OPEN_WATER certifications
rule "OPEN_WATER can do OPEN_WATER activities"
    when
        $result: CertificationValidator(
            userCertification == DiveCertification.OPEN_WATER,
            requiredCertification == DiveCertification.OPEN_WATER
        )
    then
        $result.setValid(true);
end

// Higher certifications can do lower level activities
rule "ADVANCED_OPEN_WATER can do OPEN_WATER activities"
    when
        $result: CertificationValidator(
            userCertification == DiveCertification.ADVANCED_OPEN_WATER,
            requiredCertification in (DiveCertification.OPEN_WATER, DiveCertification.ADVANCED_OPEN_WATER)
        )
    then
        $result.setValid(true);
end

rule "RESCUE_DIVER can do any activity except INSTRUCTOR"
    when
        $result: CertificationValidator(
            userCertification == DiveCertification.RESCUE_DIVER,
            requiredCertification != DiveCertification.INSTRUCTOR
        )
    then
        $result.setValid(true);
end

rule "DIVEMASTER can do any activity except INSTRUCTOR"
    when
        $result: CertificationValidator(
            userCertification == DiveCertification.DIVEMASTER,
            requiredCertification != DiveCertification.INSTRUCTOR
        )
    then
        $result.setValid(true);
end

rule "INSTRUCTOR can do any activity"
    when
        $result: CertificationValidator(
            userCertification == DiveCertification.INSTRUCTOR
        )
    then
        $result.setValid(true);
end

// ================ Trip Validation Rules ================

rule "Trip - Any cert can do NON_DIVER trips"
    when
        $user: DiveCertificationHolder()
        $trip: Trip(minCertificationRequired == DiveCertification.NON_DIVER)
        $result: ValidationResult()
    then
        $result.setValid(true);
end

rule "Trip - OPEN_WATER and above for OPEN_WATER trips"
    when
        $user: DiveCertificationHolder(
            diveCertification in (
                DiveCertification.OPEN_WATER,
                DiveCertification.ADVANCED_OPEN_WATER,
                DiveCertification.RESCUE_DIVER,
                DiveCertification.DIVEMASTER,
                DiveCertification.INSTRUCTOR
            )
        )
        $trip: Trip(minCertificationRequired == DiveCertification.OPEN_WATER)
        $result: ValidationResult()
    then
        $result.setValid(true);
end

rule "Trip - ADVANCED and above for ADVANCED trips"
    when
        $user: DiveCertificationHolder(
            diveCertification in (
                DiveCertification.ADVANCED_OPEN_WATER,
                DiveCertification.RESCUE_DIVER,
                DiveCertification.DIVEMASTER,
                DiveCertification.INSTRUCTOR
            )
        )
        $trip: Trip(minCertificationRequired == DiveCertification.ADVANCED_OPEN_WATER)
        $result: ValidationResult()
    then
        $result.setValid(true);
end

// ================ Course Validation Rules ================

rule "Course - NON_DIVER can take beginner courses"
    when
        $user: DiveCertificationHolder(diveCertification == DiveCertification.NON_DIVER)
        $course: Course(minCertificationRequired in (DiveCertification.NON_DIVER, DiveCertification.OPEN_WATER))
        $result: ValidationResult()
    then
        $result.setValid(true);
end

rule "Course - OPEN_WATER can take advancement courses"
    when
        $user: DiveCertificationHolder(diveCertification == DiveCertification.OPEN_WATER)
        $course: Course(minCertificationRequired in (DiveCertification.NON_DIVER, DiveCertification.OPEN_WATER, DiveCertification.ADVANCED_OPEN_WATER))
        $result: ValidationResult()
    then
        $result.setValid(true);
end

// Default failure rules with lower salience
rule "Default trip validation failure"
    salience -100
    when
        $user: DiveCertificationHolder()
        $trip: Trip()
        $result: ValidationResult(valid == false)
    then
        $result.addMessage("User with " + $user.getDiveCertification() +
                          " certification cannot book " + $trip.getLocation() +
                          " trip requiring " + $trip.getMinCertificationRequired());
end

rule "Default course validation failure"
    salience -100
    when
        $user: DiveCertificationHolder()
        $course: Course()
        $result: ValidationResult(valid == false)
    then
        $result.addMessage("User with " + $user.getDiveCertification() +
                         " certification cannot enroll in " + $course.getName() +
                         " course requiring " + $course.getMinCertificationRequired());
end